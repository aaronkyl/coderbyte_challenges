// Using the JavaScript language, have the function NumberSearch(str) take the
// str parameter, search for all the numbers in the string, add them together,
// then return that final number.

// there will be double digit numbers
/*
function NumbersInStringAddition(str) {
  var sum = 0;
  for (var i = 0; i < str.length; i++) {
    if (!isNaN(str[i])) {
      sum += Number(str[i]);
    }
  }
  return sum;
}

console.log(NumbersInStringAddition('hell0 th3r3 aar0n w1lk1ns0n'));

function NumbersInStringAddition2(str) {
  return str.split(/[^0-9]/).map(function (a) {return Number(a)}).filter(function(a) {return !isNaN(a)}).reduce(function(a,b) {return a+b});
}

console.log(NumbersInStringAddition2("10 2One Number*1*"));

//---------------------------------------
function AdditivePersistence(num) {

  var recurCount = 0;

  var recur = function(num) {
    numString = String(num);
    if (numString.length === 1) {
      return recurCount;
    }
    recurCount++;
    var sum = numString.split('').map(Number).reduce(function (a,b) {return a+b});
    return recur(sum);
  }
  return recur(num);
}

//------------------------------------------

function OffLineMinimum(strArr) {

  var resultArr = [];
  var workingArr = [];
  while (strArr.length > 0) {
    if (strArr[0] === 'E') {
      resultArr.push(workingArr.sort(function (a, b) {return b - a}).pop());
      strArr.shift();
    }
    else {
      workingArr.push(strArr.shift());
    }
  }
  return resultArr.join(',');

}

console.log(OffLineMinimum(["4","E","1","E","2","E","3","E"]));


//--------------------------------------------------

function OverlappingRanges(arr) {
// make first range array using for loop
// make second range affar using for loop
// set overlap minimum variable
// determine which array starts at lowest number
// find index of second array's starting number in the first array
// cycle through second array, comparing entry to next entry in first array
// continue for minimum variable length then return true
// else return false

  var array1 = [];
  var array2 = [];
  var minimumOverlap = arr[4];

  //create first array
  for (var i = arr[0]; i <= arr[1]; i++) {
    array1.push(i);
  }
  //create second array
  for (var i = arr[2]; i <= arr[3]; i++) {
    array2.push(i);
  }

  //test for
  if (array1[0] < array2[0] || array1[0] === array2[0]) {
    var startNumber = array1.indexOf(array2[0]);
    var flag = true;
    var counter = 0;
    for (var i = startNumber, j = 0; array1[i] === array2[j]; i++, j++) {
      counter++;
    }
  }
  else if (array1[0] > array2[0]) {
    var startNumber = array2.indexOf(array1[0]);
    var flag = true;
    var counter = 0;
    for (var i = startNumber, j = 0; array2[i] === array1[j]; i++, j++) {
      counter++;
    }
  }

  return counter >= minimumOverlap;

}

// keep this function call here
//--------------------------------------------------

function RectangleArea(strArr) {
  //function to clean up corner coordinates
  var coordinates = function(arrayEntry) {
    return arrayEntry.split('').filter(function(a) {return /\S/.test(a)}).map(Number).filter(function(a) {return !isNaN(a)});
  }

  //set corner coordinate variables
  var corner1 = coordinates(strArr[0]);
  var corner2 = coordinates(strArr[1]);
  var corner3 = coordinates(strArr[2]);
  var corner4 = coordinates(strArr[3]);

  //find max and min X & Y coordinates
  var yMax = Math.max(corner1[1], corner2[1], corner3[1], corner4[1]);
  var yMin = Math.min(corner1[1], corner2[1], corner3[1], corner4[1]);
  var xMax = Math.max(corner1[0], corner2[0], corner3[0], corner4[0]);
  var xMin = Math.min(corner1[0], corner2[0], corner3[0], corner4[0]);

  //get height and width measurements
  var height = yMax - yMin;
  var width = xMax - xMin;

  //calculate area
  var area = height * width;

  //return area
  return area;
}

console.log(RectangleArea(["(0 0)", "(3 0)", "(0 2)", "(3 2)"]));

//---------------------------------------------------------

// Using the JavaScript language, have the function LetterCountI(str) take the
// str parameter being passed and return the first word with the greatest number
// of repeated letters. For example: "Today, is the greatest day ever!" should
// return greatest because it has 2 e's (and 2 t's) and it comes before ever
// which also has 2 e's. If there are no words with repeating letters return -1.
// Words will be separated by spaces.

// 1 - break str into array of words
// 1.2 - variable to record longest word so far (index of word)
// 1.3 - variable to record highest repeated letter count (number)
// 2 - cycle through word array one by one
// 3 - each time, create object of current word
// 3.1 - cycle through word and if letter not already property of word object,
//       add letter as property with count 1
// 3.2 - if letter already property, increase value of that property by 1
// 3.3 - if letter value (count) > repeated letter counter, make this word's
//       index in word array the new longest word so far variable value and
//       increase highest repeated letter count by 1

function LetterCountI(str) {
  var strArray = str.split(' ');
  var longestWordIndex = 0;
  var highestRepeatCount = 1;
  var wordTable = {};

  for (var i = 0; i < strArray.length; i++) {
    var word = strArray[i];
    wordTable[word] = {};
    for (var j = 0; j < word.length; j++) {
      var letter = word[j];
      if (wordTable[word].hasOwnProperty(letter)) {
        wordTable[word][letter] += 1;
        if ( wordTable[word][letter] > highestRepeatCount) {
          highestRepeatCount += 1;
          longestWordIndex = i;
        }
      }
      else {
        wordTable[word][letter] = 1;
      }
    }
  }
  if (highestRepeatCount === 1) {
    return -1;
  }
  return strArray[longestWordIndex];
}

console.log(LetterCountI("the pizzazz of pizza"));

//-------------------------------------------------

// Using the JavaScript language, have the function SecondGreatLow(arr) take
// the array of numbers stored in arr and return the second lowest and second
// greatest numbers, respectively, separated by a space. For example: if arr
// contains [7, 7, 12, 98, 106] the output should be 12 98. The array will not
// be empty and will contain at least 2 numbers. It can get tricky if there's
// just two numbers!

function SecondGreatLow(arr) {

  var sorted = arr.sort(function(a,b){return a-b});

  if (sorted.length === 2) {
    return String(sorted[0] + " " + sorted[1]);
  }
  else {
    var filtered = sorted.filter(function(a, pos){return sorted.indexOf(a) === pos});
    return String(filtered[1] + ' ' + filtered[filtered.length - 2]);
  }
}

console.log(SecondGreatLow([90, 23]));

//-----------------------------------------------------

// Using the JavaScript language, have the function MeanMode(arr) take the
// array of numbers stored in arr and return 1 if the mode equals the mean,
// 0 if they don't equal each other (ie. [5, 3, 3, 3, 1] should return 1
// because the mode (3) equals the mean (3)). The array will not be empty,
// will only contain positive integers, and will not contain more than one mode.

function MeanMode(arr) {

  var mean = arr.reduce(function(a,b) {return a+b}) / arr.length;
  var sorted = arr.sort(function(a,b) {return a-b});
  var mode = sorted[Math.floor(sorted.length / 2)];
  return mode === mean ? 1 : 0;
}

console.log(MeanMode([1,2,3,4]));


//----------------------------------------------------------

// Using the JavaScript language, have the function PrimeTime(num) take the num
// parameter being passed and return the string true if the parameter is a
// prime number, otherwise return the string false. The range will be between
// 1 and 2^16.

function PrimeTime(num) {
  for (var i = num - 1; i > 1; i--) {
    if (Number.isInteger(num / i)) {
      return false;
    }
  }
  return true;
}

console.log(PrimeTime(2));


//-----------------------------------------------------------

// Using the JavaScript language, have the function RunLength(str) take the str
// parameter being passed and return a compressed version of the string using
// the Run-length encoding algorithm. This algorithm works by taking the
// occurrence of each repeating character and outputting that number along with
// a single character of the repeating sequence. For example: "wwwggopp" would
// return 3w2g1o2p. The string will not contain any numbers, punctuation, or
// symbols.

// 1 - break string into array
// 2 - sort array
// 3 - cycle through array and put letter into object if not already there,
//     increasing value each time letter seen
// 4 - for...in to create result string

function RunLength(str) {

  var strArray = str.split('').sort(function(a,b) {return a-b});
  var strObject = {};
  var result = '';

  for (var i = 0; i < strArray.length; i++) {
    var thisLetter = strArray[i];
    if (strObject.hasOwnProperty(thisLetter)) {
      strObject[thisLetter] += 1;
    }
    else {
      strObject[thisLetter] = 1;
    }
  }

  for (letter in strObject) {
    result += strObject[letter] + letter;
  }
  return result;
}

function RunLength(str) {

  var letter = str[0];
  var counter = 0;
  var result = '';

  for (var i = 0; i <= str.length; i++) {
    if (str[i] === letter) {
      counter++;
    }
    else {
      result += counter + letter;
      letter = str[i];
      counter = 1;
    }
  }

  return result;
}

console.log(RunLength("aabbcc"));


//--------------------------------------------------

// Using the JavaScript language, have the function PrimeMover(num) return the
// numth prime number. The range will be from 1 to 10^4. For example: if num
// is 16 the output should be 53 as 53 is the 16th prime number.

function PrimeMover(num) {

  var primesArray = [2];

  var isPrime = function(number) {
    for (var i = number - 1; i > 1; i--) {
      if (number % i === 0) {
        return isPrime(number + 1);
      }
    }
    return number;
  }

  var recur = function(lastPrime, num) {
    if (primesArray.length === num) {
      return primesArray[num - 1];
    }
    var newPrime = isPrime(lastPrime + 1);
    primesArray.push(newPrime);
    return recur(newPrime, num);
  }

  return recur(primesArray[0], num);
}

console.log(PrimeMover(5));

//--------------------------------------------------------

// Using the JavaScript language, have the function PalindromeTwo(str) take the
// str parameter being passed and return the string true if the parameter is a
// palindrome, (the string is the same forward as it is backward) otherwise
// return the string false. The parameter entered may have punctuation and
// symbols but they should not affect whether the string is in fact a
// palindrome. For example: "Anne, I vote more cars race Rome-to-Vienna"
// should return true.

function PalindromeTwo(str) {

  var alphabet = "abcdefghijklmnopqrstuvwxyz";
  var strArray = str.toLowerCase().split('').filter(function(a) {return alphabet.indexOf(a) !== -1 });

  for (var i = 0; i < str.length / 2; i++) {
    if (strArray[i] !== strArray[strArray.length - 1 - i]) {
      return false;
    }
  }
  return true;

}

console.log(PalindromeTwo("hello"));

//----------------------------------------------------------

// Using the JavaScript language, have the function Division(num1,num2) take
// both parameters being passed and return the Greatest Common Factor. That is,
// return the greatest number that evenly goes into both numbers with no
// remainder. For example: 12 and 16 both are divisible by 1, 2, and 4 so the
// output should be 4. The range for both parameters will be from 1 to 10^3.

function Division(num1, num2) {

  var num1Factors = [];
  var num2Factors = [];
  var GCF = 1;

  function findFactors(num, array) {
    for (var i = num; i > 0; i--) {
      if (num % i === 0) {
        array.unshift(i);
  }}}

  findFactors(num1, num1Factors);
  findFactors(num2, num2Factors);

  for (var i = 0; i < num1Factors.length; i++) {
    if (num2Factors.indexOf(num1Factors[i]) !== -1) {
      GCF = num1Factors[i];
    }
  }

  return GCF;
}
console.log(Division(12, 16));

// THIS IS MATTLARSH'S SOLUTION

function Division(num1,num2) {
  var nums = [];
  for(var i=1;i<=num1;i++){
    if(num1%i===0 && num2%i===0)nums.push(i);
  }
  return nums.pop();
}

// I'm going to try to recreate his SOLUTION

function Division(num1, num2) {
  var factors = [];
  for (var i = 0; i < num1; i++) {
    if (num1 % i === 0 && num2 % i === 0) {
      factors.push(i);
    }
  }
  return factors.pop();
}
console.log(Division(12, 16));
*/
//-------------------------------------------------------

// Using the JavaScript language, have the function DashInsertII(str) insert
// dashes ('-') between each two odd numbers and insert asterisks ('*') between
// each two even numbers in str. For example: if str is 4546793 the output
// should be 454*67-9-3. Don't count zero as an odd or even number.

function DashInsertII(str) {

  var resultStr = '';

  for (var i = 0; i < str.length; i++) {
    if (str[i - 1] === 0 || str[i] === 0 || str[i + 1] === 0 || i === str.length - 1) {
      resultStr += str[i];
    }
    else if (str[i] % 2 === 0 && str[i + 1] % 2 === 0) {
      resultStr += (str[i] + '*');
    }
    else if (str[i] % 2 !== 0 && str[i + 1] % 2 !== 0) {
      resultStr += (str[i] + '-');
    }
    else {
      resultStr += str[i];
    }
  }
  return resultStr;
}

console.log(DashInsertII("10120"));

// SECOND OPTION

function DashInsertII(num) {
  var numArr = num.toString().split('');
  var myArr = [];
  for(var i=0;i<numArr.length;i++){
    if(/[13579]/ig.test(numArr[i]) && /[13579]/ig.test(numArr[i+1])){
      myArr.push(numArr[i]);
      myArr.push('-');
    } else if(/[2468]/ig.test(numArr[i]) && /[2468]/ig.test(numArr[i+1])){
      myArr.push(numArr[i]);
      myArr.push('*');
    }
    else myArr.push(numArr[i]);
  }
  return myArr.join('');
}
